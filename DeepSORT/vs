tensor([597.19519,  35.19231, 648.76440,  79.74473,   0.78184,   4.00000])

(480, 852, 3)
tensor([318.85486,  10.01104,  38.50287,  20.02209])
import argparse
import os
import platform
import shutil
import time
from pathlib import Path
import cv2
import cvzone
import torch
import torch.backends.cudnn as cudnn

from yolov5.models.experimental import attempt_load
from yolov5.utils.downloads import attempt_download
from yolov5.models.common import DetectMultiBackend
from yolov5.utils.dataloaders import LoadImages, LoadStreams
from yolov5.utils.general import (LOGGER, check_img_size, non_max_suppression, scale_coords, 
                                  check_imshow, xyxy2xywh, increment_path)
from yolov5.utils.torch_utils import select_device, time_sync
from yolov5.utils.plots import Annotator, colors
from deep_sort.utils.parser import get_config
from deep_sort.deep_sort import DeepSort

import sys
sys.path.insert(0, './yolov5')

FILE = Path(__file__).resolve()
ROOT = FILE.parents[0]  # yolov5 deepsort root directory
if str(ROOT) not in sys.path:
    sys.path.append(str(ROOT))  # add ROOT to PATH
ROOT = Path(os.path.relpath(ROOT, Path.cwd()))  # relative


def yolov5_deepsort_tracking(opt):
    # - SET UP: DeepSORT
    cfg = get_config()
    cfg.merge_from_file(opt.config_deepsort)
    deepsort = DeepSort(opt.deep_sort_model,
                        max_dist=cfg.DEEPSORT.MAX_DIST,
                        max_iou_distance=cfg.DEEPSORT.MAX_IOU_DISTANCE,
                        max_age=cfg.DEEPSORT.MAX_AGE, n_init=cfg.DEEPSORT.N_INIT, nn_budget=cfg.DEEPSORT.NN_BUDGET,
                        )

    # - SET UP: YOLO    use_cuda=True
    # Load model
    device = select_device(opt.device)
    model = DetectMultiBackend(opt.yolo_model)
    stride, names, pt, jit, _ = model.stride, model.names, model.pt, model.jit, model.onnx

    imgsz = check_img_size(opt.imgsz, s=stride)
    
    # Dataloader
    bs = 1  # batch_size
    dataset = LoadImages(opt.source, img_size=imgsz, stride=stride, auto=pt and not jit)
    
    model.warmup(imgsz=(1 if pt or model.triton else bs, 3, *imgsz))  # warmup

    for frame_idx, (path, img, im0s, vid_cap, s) in enumerate(dataset):
        img = torch.from_numpy(img).to(device)
        img = img.half() if opt.half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)
        # Inference
        pred = model(img)
        pred = non_max_suppression(pred, opt.conf_thres, opt.iou_thres, opt.classes, opt.agnostic_nms, max_det=opt.max_det)
        
        for i, det in enumerate(pred):  # detections per image
            p, im0 = path, im0s.copy()#, getattr(dataset, 'frame', 0)
            p = Path(p)  # to Path
            s += '%gx%g ' % img.shape[2:]  # print string
            w, h = im0.shape[1],im0.shape[0]
            # print(w)
            if det is not None and len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()
                # Print results
                for c in det[:, -1].unique():
                    n = (det[:, -1] == c).sum()  # detections per class
                    s += f"{n} {names[int(c)]}{'s' * (n > 1)}, "  # add to string
                xywhs = xyxy2xywh(det[:, 0:4])
                confs = det[:, 4]
                clss = det[:, 5]
                
                outputs = deepsort.update(xywhs.cpu(), confs.cpu(), clss.cpu(), im0)

                for output in outputs:
                    x1, y1, x2, y2, track_id, class_id = output
                    cv2.rectangle(im0, (x1, y1), (x2, y2), (255,0,0),2)
                    cvzone.putTextRect(im0, f' {int(track_id)}', (max(0, x1),max(35,y1)), 
                                scale=1, thickness=1, offset=0)

        cv2.imshow(str(p), im0)
        if cv2.waitKey(1) == ord('q'):  # q to quit
            raise StopIteration

YOLO: 0.209s --- DeepSORT: 0.406s

YOLO: 0.324s --- DeepSORT: 0.451s


def parse_opt():
    parser = argparse.ArgumentParser()
    parser.add_argument('--yolo_model', nargs='+', type=str, default='E:/TEST/0929/Yolov5_DeepSort_Pytorch/best.pt', help='model.pt path(s)')
    parser.add_argument('--deep_sort_model', type=str, default='osnet_x0_25')
    parser.add_argument('--source', type=str, default='E:/TEST/0929/Yolov5_DeepSort_Pytorch/videos/th.mp4', help='source')  # file/folder, 0 for webcam
    parser.add_argument('--output', type=str, default='inference/output', help='output folder')  # output folder
    parser.add_argument('--imgsz', '--img', '--img-size', nargs='+', type=int, default=[480, 852], help='inference size h,w')
    parser.add_argument('--conf-thres', type=float, default=0.5, help='object confidence threshold')
    parser.add_argument('--iou-thres', type=float, default=0.5, help='IOU threshold for NMS')
    parser.add_argument('--fourcc', type=str, default='mp4v', help='output video codec (verify ffmpeg support)')
    parser.add_argument('--device', default='', help='cuda device, i.e. 0 or 0,1,2,3 or cpu')
    parser.add_argument('--show-vid', action='store_false', help='display tracking video results')
    parser.add_argument('--save-vid', action='store_false', help='save video tracking results')
    parser.add_argument('--save-txt', action='store_true', help='save MOT compliant results to *.txt')
    # class 0 is person, 1 is bycicle, 2 is car... 79 is oven
    parser.add_argument('--classes', nargs='+', type=int, default=4, help='filter by class: --class 0, or --class 16 17')
    parser.add_argument('--agnostic-nms', action='store_true', help='class-agnostic NMS')
    parser.add_argument('--augment', action='store_true', help='augmented inference')
    parser.add_argument('--evaluate', action='store_true', help='augmented inference')
    parser.add_argument("--config_deepsort", type=str, default="E:/TEST/0929/Yolov5_DeepSort_Pytorch/deep_sort/configs/deep_sort.yaml")
    parser.add_argument("--half", action="store_true", help="use FP16 half-precision inference")
    parser.add_argument('--visualize', action='store_true', help='visualize features')
    parser.add_argument('--max-det', type=int, default=1000, help='maximum detection per image')
    parser.add_argument('--dnn', action='store_true', help='use OpenCV DNN for ONNX inference')
    parser.add_argument('--project', default=ROOT / 'runs/track', help='save results to project/name')
    parser.add_argument('--name', default='exp', help='save results to project/name')
    parser.add_argument('--exist-ok', action='store_true', help='existing project/name ok, do not increment')
    opt = parser.parse_args()
    opt.imgsz *= 2 if len(opt.imgsz) == 1 else 1  # expand
    return opt



def torchyolo():
    video = cv2.VideoCapture('E:/TEST/0929/Yolov5_DeepSort_Pytorch/videos/th.mp4')

    model = torch.hub.load('ultralytics/yolov5', 'custom', 'E:/TEST/0929/Yolov5_DeepSort_Pytorch/best.pt') #base: yolov5n

    while True:
        ret, frame = video.read()
        if not ret:
            break

        results = model(frame)

        # for r in results.xyxy[0]:
        #     print(r)
        # .print()
        for i, det in enumerate(results.xyxy[0]):
            print(i)

        cv2.imshow('1', frame)
        key = cv2.waitKey(1)
        if key == ord('q'):
            break
   
    video.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':

    torchyolo()

    # opt = parse_opt()
    # with torch.no_grad():
    #     yolov5_deepsort_tracking(opt)